import streamlit as st
import requests
import json
from typing import Dict, Any
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Financial Analysis Agent",
    page_icon="",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√µes
API_URL = os.getenv("API_URL", "http://localhost:8000")

# T√≠tulo da aplica√ß√£o
st.title(" Financial Analysis Agent")
st.markdown("Sistema inteligente de an√°lise financeira usando IA")

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Sele√ß√£o do tipo de an√°lise
analysis_type = st.sidebar.selectbox(
    "Tipo de An√°lise",
    ["an√°lise fundamentalista", "an√°lise t√©cnica", "an√°lise de risco", "an√°lise completa"]
)

# Input para ticker
ticker = st.text_input(" Digite o c√≥digo da a√ß√£o (ex: PETR4, VALE3)", "PETR4").upper()

# Input para informa√ß√µes da empresa (se an√°lise de risco)
company_info = ""
if analysis_type == "an√°lise de risco":
    company_info = st.sidebar.text_area("‚ÑπÔ∏è Informa√ß√µes da empresa (opcional)", "")

# Bot√£o para executar an√°lise
if st.button("ÔøΩÔøΩ Executar An√°lise", type="primary"):
    if ticker:
        with st.spinner(f"Executando {analysis_type} para {ticker}..."):
            try:
                # Preparar dados da requisi√ß√£o
                data = {
                    "ticker": ticker,
                    "analysis_type": analysis_type,
                    "company_info": company_info
                }

                # Determinar endpoint baseado no tipo de an√°lise
                if analysis_type == "an√°lise fundamentalista":
                    endpoint = "/analyze/fundamental"
                elif analysis_type == "an√°lise t√©cnica":
                    endpoint = "/analyze/technical"
                elif analysis_type == "an√°lise de risco":
                    endpoint = "/analyze/risk"
                else:  # an√°lise completa
                    endpoint = "/analyze/comprehensive"

                # Fazer requisi√ß√£o para a API
                response = requests.post(
                    f"{API_URL}{endpoint}",
                    json=data,
                    timeout=120
                )

                if response.status_code == 200:
                    result = response.json()

                    if result["success"]:
                        st.success("‚úÖ An√°lise conclu√≠da com sucesso!")

                        # Mostrar resultados
                        analysis_data = result["data"]

                        # Informa√ß√µes b√°sicas
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Ticker", analysis_data["ticker"])
                        with col2:
                            st.metric("Tipo", analysis_data["analysis_type"])
                        with col3:
                            if "current_price" in analysis_data:
                                st.metric("Pre√ßo", analysis_data["current_price"])

                        # An√°lise detalhada
                        if "detailed_analysis" in analysis_data:
                            st.subheader("üìã An√°lise Detalhada")
                            st.write(analysis_data["detailed_analysis"])

                        # Resumo executivo
                        if "executive_summary" in analysis_data:
                            st.subheader("üìä Resumo Executivo")
                            st.write(analysis_data["executive_summary"])

                        # An√°lise t√©cnica
                        if "technical_analysis" in analysis_data:
                            st.subheader(" An√°lise T√©cnica")
                            st.write(analysis_data["technical_analysis"])

                        # An√°lise de risco
                        if "risk_analysis" in analysis_data:
                            st.subheader("‚ö†Ô∏è An√°lise de Risco")
                            st.write(analysis_data["risk_analysis"])

                        # Resumo contextual
                        if "contextual_summary" in analysis_data:
                            st.subheader("üåç Resumo Contextual")
                            st.write(analysis_data["contextual_summary"])

                    else:
                        st.error(f"‚ùå Erro na an√°lise: {result.get('error', 'Erro desconhecido')}")
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code}")

            except Exception as e:
                st.error(f"‚ùå Erro durante a execu√ß√£o: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è Por favor, digite um c√≥digo de a√ß√£o v√°lido.")

# Se√ß√£o para perguntas gerais
st.markdown("---")
st.subheader("üí¨ Perguntas Gerais")

question = st.text_input("Fa√ßa uma pergunta sobre o mercado financeiro:")
if st.button("ü§î Perguntar"):
    if question:
        with st.spinner("Processando pergunta..."):
            try:
                response = requests.post(
                    f"{API_URL}/agent/ask",
                    json={"question": question},
                    timeout=60
                )

                if response.status_code == 200:
                    result = response.json()
                    if result["success"]:
                        st.success("‚úÖ Pergunta respondida!")
                        st.write(result["data"]["answer"])
                    else:
                        st.error(f"‚ùå Erro: {result.get('error', 'Erro desconhecido')}")
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code}")

            except Exception as e:
                st.error(f"‚ùå Erro: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è Por favor, digite uma pergunta.")

# Footer
st.markdown("---")
st.markdown("üîß Desenvolvido com LangChain e OpenAI")
